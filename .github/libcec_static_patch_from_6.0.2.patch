diff --color -B -w -x nsis -x cec-client -x .git -ur cec-upstream/CMakeLists.txt libcec-opeik-static-builds/CMakeLists.txt
--- cec-upstream/CMakeLists.txt	2022-04-23 12:46:37.895743623 +0300
+++ libcec-opeik-static-builds/CMakeLists.txt	2024-12-14 22:10:29.900989352 +0200
@@ -1,27 +1,19 @@
+cmake_minimum_required(VERSION 3.29)
 project(libcec)
-cmake_minimum_required(VERSION 3.12.0)
 
 set(LIBCEC_VERSION_MAJOR 6)
 set(LIBCEC_VERSION_MINOR 0)
 set(LIBCEC_VERSION_PATCH 2)
+SET(BUILD_STATIC_LIB TRUE CACHE BOOL "Whether to build a static library.")
 
-# cec-client
-add_subdirectory(src/cec-client)
-add_dependencies(cec-client cec)
-
-# cecc-client
-add_subdirectory(src/cecc-client)
-add_dependencies(cecc-client cec)
-
-# pyCecClient
-add_subdirectory(src/pyCecClient)
+# platform
+add_subdirectory(src/platform)
 
 # libCEC
 add_subdirectory(src/libcec)
 
 # version number
-configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/version.h.in
-               ${CMAKE_CURRENT_SOURCE_DIR}/include/version.h)
+configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/version.h.in ${CMAKE_CURRENT_SOURCE_DIR}/include/version.h)
 
 # windows specific files
 if(WIN32)
diff --color -B -w -x nsis -x cec-client -x .git -ur cec-upstream/.gitignore libcec-opeik-static-builds/.gitignore
--- cec-upstream/.gitignore	2022-04-23 12:46:37.895743623 +0300
+++ libcec-opeik-static-builds/.gitignore	2024-12-14 22:10:29.900989352 +0200
@@ -17,6 +17,7 @@
 *.suo
 *.user
 *.aps
+*.swp
 env.h
 version.h
 .vs
diff --color -B -w -x nsis -x cec-client -x .git -ur cec-upstream/src/cecc-client/CMakeLists.txt libcec-opeik-static-builds/src/cecc-client/CMakeLists.txt
--- cec-upstream/src/cecc-client/CMakeLists.txt	2022-04-23 12:46:37.901743502 +0300
+++ libcec-opeik-static-builds/src/cecc-client/CMakeLists.txt	2024-12-14 22:10:29.924322134 +0200
@@ -1,5 +1,4 @@
 project(ceccclient)
-cmake_minimum_required(VERSION 3.12.0)
 
 set(ceccclient_NAME ceccclient)
 set(ceccclient_DESCRIPTION "libCEC test client")
@@ -12,16 +11,21 @@
 include(CheckLibraryExists)
 include(CheckIncludeFiles)
 
-find_package(p8-platform REQUIRED)
 find_package(Threads REQUIRED)
 
 set(ceccclient_SOURCES cecc-client.c)
 
 add_executable(cecc-client ${ceccclient_SOURCES})
 set_target_properties(cecc-client PROPERTIES VERSION ${LIBCEC_VERSION_MAJOR}.${LIBCEC_VERSION_MINOR}.${LIBCEC_VERSION_PATCH})
-target_link_libraries(cecc-client ${p8-platform_LIBRARIES})
+target_link_libraries(cecc-client p8-platform)
 target_link_libraries(cecc-client ${CMAKE_THREAD_LIBS_INIT})
 
+target_include_directories(cecc-client PRIVATE ${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/../../include)
+
+# include_directories(${p8-platform_INCLUDE_DIRS}
+# ${PROJECT_SOURCE_DIR}
+# ${PROJECT_SOURCE_DIR}/../../include)
+
 if (NOT WIN32)
   # check for dlopen
   check_library_exists(dl dlopen "" HAVE_DLOPEN)
@@ -42,9 +48,6 @@
   endif()
 endif()
 
-include_directories(${p8-platform_INCLUDE_DIRS}
-                    ${PROJECT_SOURCE_DIR}
-                    ${PROJECT_SOURCE_DIR}/../../include)
 
 # write env.h
 CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/env.h.in ${CMAKE_CURRENT_SOURCE_DIR}/env.h)
Only in cec-upstream/src/dotnet/src/CecSharpTester/netfx/Properties: AssemblyInfo.cs
Only in cec-upstream/src/dotnet/src/LibCecTray/Properties: AssemblyInfo.cs
diff --color -B -w -x nsis -x cec-client -x .git -ur cec-upstream/src/libcec/cmake/CheckPlatformSupport.cmake libcec-opeik-static-builds/src/libcec/cmake/CheckPlatformSupport.cmake
--- cec-upstream/src/libcec/cmake/CheckPlatformSupport.cmake	2022-04-23 12:46:37.908743362 +0300
+++ libcec-opeik-static-builds/src/libcec/cmake/CheckPlatformSupport.cmake	2024-12-14 22:10:29.987653969 +0200
@@ -194,103 +204,3 @@
 
 # check for dlopen
 check_library_exists(dl dlopen "" HAVE_DLOPEN)
-
-SET(SKIP_PYTHON_WRAPPER 0 CACHE STRING "Define to 1 to not generate the Python wrapper")
-
-if (${SKIP_PYTHON_WRAPPER})
-  message(STATUS "Not generating Python wrapper")
-else()
-  # Python
-  if(PYTHON_USE_VERSION EQUAL 2)
-    # forced v2
-    include(FindPython2)
-    find_package(Python2 COMPONENTS Interpreter Development)
-    set(PYTHONLIBS_FOUND "${Python2_FOUND}")
-    set(PYTHONLIBS_VERSION_STRING "${Python2_VERSION}")
-    set(PYTHON_INCLUDE_PATH "${Python2_INCLUDE_DIRS}")
-    set(PYTHON_LIBRARIES "${Python2_LIBRARIES}")
-  else()
-    include(FindPythonLibs)
-    find_package(PythonLibs)
-  endif()
-
-  # Swig
-  find_package(SWIG)
-  if (PYTHONLIBS_FOUND AND SWIG_FOUND)
-    set(HAVE_PYTHON 1)
-
-    if(${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.13")
-      # old style swig
-      cmake_policy(SET CMP0078 OLD)
-    endif()
-    if(${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.14")
-      # old style swig
-      cmake_policy(SET CMP0086 OLD)
-    endif()
-
-    set(CMAKE_SWIG_FLAGS "-threads")
-    if ("${PYTHONLIBS_VERSION_STRING}" STREQUAL "")
-      message(STATUS "Python version not found, defaulting to 2.7")
-      set(PYTHONLIBS_VERSION_STRING "2.7.x")
-      set(PYTHON_VERSION "2.7")
-    else()
-      string(REGEX REPLACE "\\.[0-9,a,b,rc]+\\+?$" "" PYTHON_VERSION ${PYTHONLIBS_VERSION_STRING})
-    endif()
-    string(REGEX REPLACE "\\..*$" "" PYTHON_MAJOR_VERSION ${PYTHON_VERSION})
-    string(REGEX REPLACE "^.*\\." "" PYTHON_MINOR_VERSION ${PYTHON_VERSION})
-
-    include(${SWIG_USE_FILE})
-    include_directories(${PYTHON_INCLUDE_PATH})
-    include_directories(${CMAKE_CURRENT_SOURCE_DIR})
-
-    SET_SOURCE_FILES_PROPERTIES(libcec.i PROPERTIES CPLUSPLUS ON)
-    SWIG_ADD_LIBRARY(cec LANGUAGE python TYPE MODULE SOURCES libcec.i)
-    SWIG_LINK_LIBRARIES(cec cec ${PYTHON_LIBRARIES})
-
-    SET(PYTHON_LIB_INSTALL_PATH "/cec" CACHE STRING "python lib path")
-    if (${PYTHON_MAJOR_VERSION} EQUAL 2 AND ${PYTHON_MINOR_VERSION} GREATER 6)
-      SET(PYTHON_LIB_INSTALL_PATH "" CACHE STRING "python lib path" FORCE)
-    else()
-      if (${PYTHON_MAJOR_VERSION} GREATER 2)
-        SET(PYTHON_LIB_INSTALL_PATH "" CACHE STRING "python lib path" FORCE)
-      endif()
-    endif()
-
-    if(WIN32)
-      install(TARGETS     ${SWIG_MODULE_cec_REAL_NAME}
-              DESTINATION python/${PYTHON_LIB_INSTALL_PATH})
-      install(FILES       ${CMAKE_BINARY_DIR}/src/libcec/cec.py
-              DESTINATION python/cec)
-      if (${PYTHON_MAJOR_VERSION} EQUAL 2)
-        install(FILES ${CMAKE_SOURCE_DIR}/src/libcec/cmake/__init__.py
-                DESTINATION python/cec)
-      endif()
-    else()
-      if(EXISTS "/etc/os-release")
-        file(READ "/etc/os-release" OS_RELEASE)
-        string(REGEX MATCH "ID(_LIKE)?=debian" IS_DEBIAN ${OS_RELEASE})
-        if (IS_DEBIAN)
-          SET(PYTHON_PKG_DIR "dist-packages")
-        endif()
-      endif()
-
-      if (NOT PYTHON_PKG_DIR)
-        SET(PYTHON_PKG_DIR "site-packages")
-      endif()
-
-      if (${PYTHON_MAJOR_VERSION} EQUAL 2)
-        install(TARGETS     ${SWIG_MODULE_cec_REAL_NAME}
-                DESTINATION lib/python${PYTHON_VERSION}/${PYTHON_PKG_DIR}/${PYTHON_LIB_INSTALL_PATH}/cec)
-        install(FILES       ${CMAKE_BINARY_DIR}/src/libcec/cec.py
-                DESTINATION lib/python${PYTHON_VERSION}/${PYTHON_PKG_DIR})
-        install(FILES ${CMAKE_SOURCE_DIR}/src/libcec/cmake/__init__.py
-                DESTINATION lib/python${PYTHON_VERSION}/${PYTHON_PKG_DIR}/cec)
-      else()
-        install(TARGETS     ${SWIG_MODULE_cec_REAL_NAME}
-                DESTINATION lib/python${PYTHON_VERSION}/${PYTHON_PKG_DIR}/${PYTHON_LIB_INSTALL_PATH})
-        install(FILES       ${CMAKE_BINARY_DIR}/src/libcec/cec.py
-                DESTINATION lib/python${PYTHON_VERSION}/${PYTHON_PKG_DIR})
-      endif()
-    endif()
-  endif()
-endif()
diff --color -B -w -x nsis -x cec-client -x .git -ur cec-upstream/src/libcec/CMakeLists.txt libcec-opeik-static-builds/src/libcec/CMakeLists.txt
--- cec-upstream/src/libcec/CMakeLists.txt	2022-04-23 12:46:37.904743442 +0300
+++ libcec-opeik-static-builds/src/libcec/CMakeLists.txt	2024-12-14 23:10:44.544757549 +0200
@@ -1,33 +1,21 @@
-project(cec)
-cmake_minimum_required(VERSION 3.12.0)
+cmake_minimum_required(VERSION 3.29)
+project(cec
+  VERSION ${LIBCEC_VERSION_MAJOR}.${LIBCEC_VERSION_MINOR}.${LIBCEC_VERSION_PATCH}
+  DESCRIPTION "libcec"
+  LANGUAGES CXX
+)
 
 set(cec_NAME cec)
 set(cec_DESCRIPTION "libCEC")
 
-enable_language(CXX)
-
 include(CheckCXXSourceCompiles)
 include(CheckLibraryExists)
 include(CheckIncludeFiles)
 include(CheckCXXCompilerFlag)
 include(../../cmake/UseMultiArch.cmake)
 
-check_cxx_compiler_flag("-std=c++11" SUPPORTS_CXX11)
-if (SUPPORTS_CXX11)
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
-endif()
-
-find_package(p8-platform REQUIRED)
-if (p8-platform_VERSION VERSION_LESS 2.0)
-  message(FATAL_ERROR "p8-platform 2.0+ is required")
-endif()
-
 find_package(Threads REQUIRED)
 
-include_directories(${p8-platform_INCLUDE_DIRS}
-                    ${PROJECT_SOURCE_DIR}
-                    ${PROJECT_SOURCE_DIR}/../../include)
-
 set(CMAKE_POSITION_INDEPENDENT_CODE on)
 
 # main libCEC files
@@ -133,7 +121,6 @@
 source_group("Header Files" FILES ${CEC_HEADERS})
 
 # platform and device specific
-include(cmake/SetBuildInfo.cmake)
 include(cmake/CheckPlatformSupport.cmake)
 
 ## create project groups
@@ -190,13 +179,20 @@
 # external dependencies
 include(cmake/LinkPlatformSupport.cmake)
 
-# libCEC shared target
+if(BUILD_STATIC_LIB)
+  add_library(cec STATIC ${CEC_SOURCES})
+else()
 add_library(cec SHARED ${CEC_SOURCES})
-install(TARGETS cec
-        DESTINATION ${LIB_DESTINATION})
-set_target_properties(cec PROPERTIES VERSION   ${LIBCEC_VERSION_MAJOR}.${LIBCEC_VERSION_MINOR}.${LIBCEC_VERSION_PATCH}
-                                     SOVERSION ${LIBCEC_VERSION_MAJOR})
-target_link_libraries(cec ${cec_depends})
+endif()
+
+install(TARGETS cec DESTINATION ${LIB_DESTINATION})
+target_link_libraries(cec PRIVATE p8-platform)
+target_include_directories(cec PRIVATE ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/../../include)
+if(WIN32)
+  target_include_directories(${CMAKE_CURRENT_SOURCE_DIR}/build/amd64/include/p8-platform)
+  target_include_directories("${CMAKE_CURRENT_SOURCE_DIR}/build/amd64/include/p8-platform") # hacky but works
+endif(WIN32)
+target_compile_options(cec PRIVATE "-w")
 
 if (MSVC)
   # generate pdb in release mode too
@@ -209,28 +205,18 @@
 endif(MSVC)
 
 if(WIN32)
-  # libCEC static target used by .net wrappers
-  add_library(cec-static STATIC ${CEC_SOURCES})
-  install(TARGETS cec-static
-          DESTINATION ${LIB_DESTINATION})
-  set_target_properties(cec-static PROPERTIES VERSION   ${LIBCEC_VERSION_MAJOR}.${LIBCEC_VERSION_MINOR}.${LIBCEC_VERSION_PATCH}
-                                       SOVERSION ${LIBCEC_VERSION_MAJOR})
-  target_link_libraries(cec-static ${cec_depends})
-
   if (MSVC)
     # generate pdb in release mode too
-    set_target_properties(cec-static
+    set_target_properties(cec
         PROPERTIES
-        COMPILE_PDB_NAME_DEBUG cec-static${CMAKE_DEBUG_POSTFIX}
-        COMPILE_PDB_NAME_RELEASE cec-static
-        COMPILE_PDB_NAME_MINSIZEREL cec-static
-        COMPILE_PDB_NAME_RELWITHDEBINFO cec-static)
+      COMPILE_PDB_NAME_DEBUG cec${CMAKE_DEBUG_POSTFIX}
+      COMPILE_PDB_NAME_RELEASE cec
+      COMPILE_PDB_NAME_MINSIZEREL cec
+      COMPILE_PDB_NAME_RELWITHDEBINFO cec)
 
     # install generated pdb
     install(FILES $<TARGET_FILE_DIR:cec>/cec.pdb
             DESTINATION "${CMAKE_INSTALL_LIBDIR}")
-    install(FILES $<TARGET_FILE_DIR:cec-static>/cec-static.pdb
-            DESTINATION "${CMAKE_INSTALL_LIBDIR}")
   endif(MSVC)
 endif(WIN32)
 
diff --color -B -w -x nsis -x cec-client -x .git -ur cec-upstream/src/platform/CMakeLists.txt libcec-opeik-static-builds/src/platform/CMakeLists.txt
--- cec-upstream/src/platform/CMakeLists.txt	2023-08-01 20:06:07.011499457 +0300
+++ libcec-opeik-static-builds/src/platform/CMakeLists.txt	2024-12-14 22:25:23.081845901 +0200
@@ -1,20 +1,15 @@
-project(p8-platform)
-
-cmake_minimum_required(VERSION 2.8.9)
-enable_language(CXX)
+cmake_minimum_required(VERSION 3.29)
+project(p8-platform
+  VERSION 2.1.1
+  DESCRIPTION "Pulse-Eight platform support library"
+  LANGUAGES CXX
+)
 
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR})
 
 find_package(Threads REQUIRED)
 include(UseMultiArch.cmake)
 include(CheckAtomic.cmake)
-
-set(p8-platform_NAME p8-platform)
-set(p8-platform_DESCRIPTION "Pulse-Eight platform support library")
-set(p8-platform_VERSION_MAJOR 2)
-set(p8-platform_VERSION_MINOR 1)
-set(p8-platform_VERSION_PATCH 1)
-
 set(CMAKE_POSITION_INDEPENDENT_CODE on)
 
 if(WIN32)
@@ -22,22 +17,29 @@
                    src/windows/os-threads.cpp)
 endif()
 
-set(p8-platform_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include/p8-platform")
-if(WIN32)
-  LIST(APPEND p8-platform_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include/p8-platform/windows")
-endif(WIN32)
-set(p8-platform_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})
-
-if(NOT ${CORE_SYSTEM_NAME} STREQUAL "")
-  if(${CORE_SYSTEM_NAME} STREQUAL "osx" OR ${CORE_SYSTEM_NAME} STREQUAL "ios")
-    list(APPEND p8-platform_LIBRARIES "-framework CoreVideo")
-  endif()
+add_library(p8-platform)
+target_include_directories(p8-platform PUBLIC ${CMAKE_CURRENT_SOURCE_DIR} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src)
+target_sources(p8-platform PRIVATE src/util/StringUtils.cpp ${PLAT_SOURCES})
+target_compile_options(p8-platform PRIVATE "-w")
+
+function(add_framework target scope framework)
+  find_library(${framework}_FRAMEWORK ${framework})
+
+  if("${framework}_FRAMEWORK" STREQUAL "")
+    message(FATAL_ERROR "can't find ${framework} framework")
+  else()
+    message(STATUS "found ${framework} framework: ${${framework}_FRAMEWORK}")
 endif()
 
-set(SOURCES src/util/StringUtils.cpp)
+  target_link_libraries(${target} ${scope} ${${framework}_FRAMEWORK})
+endfunction()
+
+if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
+  add_framework(p8-platform PRIVATE Foundation)
+  add_framework(p8-platform PRIVATE CoreVideo)
+  add_framework(p8-platform PRIVATE IoKit)
+endif()
 
-add_library(p8-platform ${SOURCES} ${PLAT_SOURCES})
-target_link_libraries(p8-platform ${p8-platform_LIBRARIES})
 set_target_properties(p8-platform
     PROPERTIES
     VERSION ${p8-platform_VERSION_MAJOR}.${p8-platform_VERSION_MINOR}.${p8-platform_VERSION_PATCH}
Only in libcec-opeik-static-builds/src/platform: p8-platform
Only in libcec-opeik-static-builds/src/platform/support: .gitignore
Only in libcec-opeik-static-builds/src/platform/support: linux
Only in libcec-opeik-static-builds/src/platform/support: windows
Only in cec-upstream/support/windows: libusb0.dll
Only in cec-upstream/support/windows: p8-usbcec-bootloader-driver-installer.exe
Only in cec-upstream/support/windows: p8-usbcec-driver-installer.exe
